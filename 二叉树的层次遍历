 class Solution {
   public List<List<Integer>> levelOrder(TreeNode root) {
         if(root==null) {
            return new ArrayList<List<Integer>>();
         }
 //创建一个输出集合和一个队列
         List<List<Integer>> res=new ArrayList<List<Integer>>();
         Deque<TreeNode> queue=new LinkedList<TreeNode>();
         queue.add(root);
         while (queue.size()>0){
         int size= queue.size();
 //创建一个临时存储集合用于存放TreeNode的值
            ArrayList<Integer> tmp = new ArrayList<>();
            for (int i=0;i<size;i++){
 //将队列中的结点依次移除，将移除节点的值存入临时集合中
               TreeNode T=queue.remove();
               tmp.add(T.val);
               if (T.left!=null){
                  queue.add(T.left);
               }
               if (T.right!=null){
                  queue.add(T.right);
               }
            }
            res.add(tmp);
         }
      return res;
   }
  }
  public class TreeNode {
      int val;
      TreeNode left;
      TreeNode right;
      TreeNode () {
      }
      TreeNode (int val) {
          this.val = val;
      }
      TreeNode (int val, TreeNode left, TreeNode right) {
          this.val = val;
          this.left = left;
          this.right = right;
      }
